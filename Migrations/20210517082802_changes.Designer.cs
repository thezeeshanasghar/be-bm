// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnet.Models;

namespace dotnet.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210517082802_changes")]
    partial class changes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("dotnet.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultationFee");

                    b.Property<int>("EmergencyConsultationFee");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("ShareInFee");

                    b.Property<int>("SpecialityType");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("doctors");
                });

            modelBuilder.Entity("dotnet.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CNIC");

                    b.Property<string>("Contact");

                    b.Property<string>("Email");

                    b.Property<string>("EmergencyContact");

                    b.Property<string>("EmployeeType");

                    b.Property<string>("FatherHusbandName");

                    b.Property<string>("FirstName");

                    b.Property<int>("FlourNo");

                    b.Property<string>("Gender");

                    b.Property<DateTime>("JoiningDate");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("dotnet.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BillType");

                    b.Property<string>("EmployeeName");

                    b.Property<string>("EmployeeOrVender");

                    b.Property<string>("ExpenseCategory");

                    b.Property<string>("PaymentType");

                    b.Property<double>("TotalBill");

                    b.Property<string>("TransactionDetail");

                    b.Property<string>("VoucherNo");

                    b.HasKey("Id");

                    b.ToTable("expenses");
                });

            modelBuilder.Entity("dotnet.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckupType");

                    b.Property<double>("ConsultationFee");

                    b.Property<double>("Discount");

                    b.Property<double>("Disposibles");

                    b.Property<int>("DoctorId");

                    b.Property<double>("GrossAmount");

                    b.Property<int>("IsRefund");

                    b.Property<double>("NetAmount");

                    b.Property<int>("PatientId");

                    b.Property<string>("PaymentType");

                    b.Property<DateTime>("PreviousVisitDate");

                    b.Property<int>("ProcedureId");

                    b.Property<int?>("ProceduresId");

                    b.Property<double>("RefundAmount");

                    b.Property<DateTime>("TodayVisitDate");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProceduresId");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("dotnet.Models.Nurse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DutyDuration");

                    b.Property<int>("EmployeeId");

                    b.Property<double>("Salary");

                    b.Property<int>("SharePercentage");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("nurses");
                });

            modelBuilder.Entity("dotnet.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("BloodGroup");

                    b.Property<string>("City");

                    b.Property<string>("ClinicSite");

                    b.Property<string>("Contact");

                    b.Property<DateTime>("Dob");

                    b.Property<string>("Email");

                    b.Property<string>("ExternalId");

                    b.Property<string>("FatherHusbandName");

                    b.Property<string>("LocalArea");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("Name");

                    b.Property<string>("PatientCategory");

                    b.Property<string>("PatientDetails");

                    b.Property<string>("PatientGardian");

                    b.Property<string>("PatientType");

                    b.Property<string>("PaymentProfile");

                    b.Property<string>("PlaceofBirth");

                    b.Property<string>("ReferedBy");

                    b.Property<DateTime>("ReferedDate");

                    b.Property<string>("Religion");

                    b.Property<string>("Sex");

                    b.HasKey("Id");

                    b.ToTable("patients");
                });

            modelBuilder.Entity("dotnet.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("dotnet.Models.Procedures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Charges");

                    b.Property<string>("Name");

                    b.Property<string>("PerformedBy");

                    b.Property<int>("PerformerShare");

                    b.HasKey("Id");

                    b.ToTable("procedures");
                });

            modelBuilder.Entity("dotnet.Models.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DoctorId");

                    b.Property<string>("Name");

                    b.Property<long>("PaidAmount");

                    b.Property<int>("PatientId");

                    b.Property<int>("PaymentId");

                    b.Property<long>("PendingAmount");

                    b.Property<string>("Pmid");

                    b.Property<int>("ReceiptionistId");

                    b.Property<string>("Sex");

                    b.Property<long>("TotalAmount");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PaymentId");

                    b.ToTable("receipts");
                });

            modelBuilder.Entity("dotnet.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Availability");

                    b.Property<string>("FlourNo");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("dotnet.Models.Doctor", b =>
                {
                    b.HasOne("dotnet.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnet.Models.Invoice", b =>
                {
                    b.HasOne("dotnet.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet.Models.Procedures", "Procedures")
                        .WithMany()
                        .HasForeignKey("ProceduresId");
                });

            modelBuilder.Entity("dotnet.Models.Nurse", b =>
                {
                    b.HasOne("dotnet.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnet.Models.Receipt", b =>
                {
                    b.HasOne("dotnet.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
