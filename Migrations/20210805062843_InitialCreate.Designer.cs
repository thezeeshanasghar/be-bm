// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnet.Models;

namespace dotnet.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210805062843_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("dotnet.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppointmentCode");

                    b.Property<DateTime>("AppointmentDate");

                    b.Property<string>("AppointmentType");

                    b.Property<int>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("dotnet.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultationFee");

                    b.Property<int>("EmergencyConsultationFee");

                    b.Property<int>("ShareInFee");

                    b.Property<string>("SpecialityType");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("dotnet.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BillType");

                    b.Property<string>("EmployeeName");

                    b.Property<string>("EmployeeOrVender");

                    b.Property<string>("ExpenseCategory");

                    b.Property<string>("PaymentType");

                    b.Property<double>("TotalBill");

                    b.Property<string>("TransactionDetail");

                    b.Property<string>("VoucherNo");

                    b.HasKey("Id");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("dotnet.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AppointmentId");

                    b.Property<string>("CheckupType");

                    b.Property<double>("ConsultationFee");

                    b.Property<double>("Discount");

                    b.Property<double>("Disposibles");

                    b.Property<int>("DoctorId");

                    b.Property<double>("GrossAmount");

                    b.Property<int>("IsRefund");

                    b.Property<double>("NetAmount");

                    b.Property<string>("PaymentType");

                    b.Property<DateTime>("PreviousVisitDate");

                    b.Property<int>("ProcedureId");

                    b.Property<double>("RefundAmount");

                    b.Property<DateTime>("TodayVisitDate");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("dotnet.Models.InvoiceProcedures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InvoiceId");

                    b.Property<int>("ProcedureId");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProcedureId");

                    b.ToTable("InvoiceProcedures");
                });

            modelBuilder.Entity("dotnet.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Password");

                    b.Property<int>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("dotnet.Models.Nurse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DutyDuration");

                    b.Property<double>("Salary");

                    b.Property<int>("SharePercentage");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("dotnet.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BloodGroup");

                    b.Property<string>("City");

                    b.Property<string>("ClinicSite");

                    b.Property<string>("Cnic");

                    b.Property<string>("Contact");

                    b.Property<DateTime>("Dob");

                    b.Property<string>("Email");

                    b.Property<string>("ExternalId");

                    b.Property<string>("FatherHusbandName");

                    b.Property<string>("LocalArea");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("Name");

                    b.Property<string>("PatientCategory");

                    b.Property<string>("PatientDetails");

                    b.Property<string>("PatientGardian");

                    b.Property<string>("PatientType");

                    b.Property<string>("PaymentProfile");

                    b.Property<string>("PlaceofBirth");

                    b.Property<string>("ReferedBy");

                    b.Property<DateTime>("ReferedDate");

                    b.Property<string>("Religion");

                    b.Property<string>("Sex");

                    b.Property<int?>("UserObjectId");

                    b.HasKey("Id");

                    b.HasIndex("UserObjectId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("dotnet.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("dotnet.Models.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Charges");

                    b.Property<string>("Name");

                    b.Property<string>("PerformedBy");

                    b.Property<int>("PerformerShare");

                    b.HasKey("Id");

                    b.ToTable("Procedures");
                });

            modelBuilder.Entity("dotnet.Models.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Description");

                    b.Property<string>("QualificationType");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("dotnet.Models.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DoctorId");

                    b.Property<string>("Name");

                    b.Property<long>("PaidAmount");

                    b.Property<int>("PatientId");

                    b.Property<int>("PaymentId");

                    b.Property<long>("PendingAmount");

                    b.Property<string>("Pmid");

                    b.Property<int>("ReceiptionistId");

                    b.Property<string>("Sex");

                    b.Property<long>("TotalAmount");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("dotnet.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoomCapacity");

                    b.Property<double>("RoomCharges");

                    b.Property<string>("RoomNo");

                    b.Property<string>("RoomType");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("dotnet.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("dotnet.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Cnic");

                    b.Property<string>("Contact");

                    b.Property<string>("Email");

                    b.Property<string>("EmergencyContact");

                    b.Property<string>("Experience");

                    b.Property<string>("FatherHusbandName");

                    b.Property<string>("FirstName");

                    b.Property<int>("FloorNo");

                    b.Property<string>("Gender");

                    b.Property<DateTime>("JoiningDate");

                    b.Property<string>("LastName");

                    b.Property<string>("UserType");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("dotnet.Models.Appointment", b =>
                {
                    b.HasOne("dotnet.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnet.Models.Doctor", b =>
                {
                    b.HasOne("dotnet.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnet.Models.Invoice", b =>
                {
                    b.HasOne("dotnet.Models.Appointment", "Appointment")
                        .WithMany("Invoices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnet.Models.InvoiceProcedures", b =>
                {
                    b.HasOne("dotnet.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet.Models.Procedure", "Procedures")
                        .WithMany()
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnet.Models.Nurse", b =>
                {
                    b.HasOne("dotnet.Models.User", "UserObject")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnet.Models.Patient", b =>
                {
                    b.HasOne("dotnet.Models.User", "UserObject")
                        .WithMany()
                        .HasForeignKey("UserObjectId");
                });

            modelBuilder.Entity("dotnet.Models.Qualification", b =>
                {
                    b.HasOne("dotnet.Models.User", "user")
                        .WithMany("Qualifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnet.Models.Receipt", b =>
                {
                    b.HasOne("dotnet.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
